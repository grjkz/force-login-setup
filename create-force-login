#!/bin/bash

successMessage="\x1b[32;1mSuccess...\x1b[0m\n"

##
## Get SFDC username, password and instance type
##
# Prompt user for username
printf "\nEnter username: ";
read -r sfdcUsername;

# Lowercase username
sfdcUsername="$(echo $sfdcUsername | tr '[A-Z]' '[a-z]')"

# Prompt user for password
printf "\nEnter password: ";
read -r sfdcPassword;

# Prompt user for instance type
printf "\nEnter instance type(test/login): ";
read -r sfdcInstanceType;


##
## Call Force CLI command to login and pipe response to force-login-log.txt
##
force login -u=$sfdcUsername -p="$sfdcPassword" -i=$sfdcInstanceType > force-login-log.txt;


##
## Determine if login was successful by reading login log file
##
# Variables related to determining if login was a success
login_success_prefix="Logged in as '${sfdcUsername}'";
login_successful=false;

# Read and print file to console
# Determine if response was a success
printf "\x1b[34;1m";
echo " "
while IFS='' read -r line || [[ -n "$line" ]]; do
  # Print line to console
  echo $line;

  # Check if the current line begins with the expected success response
  if [[ "$line" == "$login_success_prefix"* ]]
  then
      echo 'Logged in successfully.'
      login_successful=true;
  fi
done < "./force-login-log.txt";
printf "\x1b[0m";

# Exit if login was unsuccessful
if [ "$login_successful" = "false" ]
then
  echo 'ERROR: Login prefix text did not match.'
  exit 1;
fi


##
## Functions
##
createLoginScript() {
  # Create a login script containing the Force CLI command active command
  printf "#!/bin/bash\nforce login -u=$sfdcUsername -p='$sfdcPassword' -i=$sfdcInstanceType\n"  > ./login;
  chmod +x login;
}

createAntBuildProperties() {
  # Create Ant build.properties file, org is set to src
  buildXmlFile="org = src\nsf.username = $sfdcUsername\nsf.password = $sfdcPassword\nsf.serverurl = $sfdcInstanceType.salesforce.com\nsf.maxPoll = 20";
  # Write to file
  echo -e $buildXmlFile > build.properties;
}

createForceFasterSaveCredentialsJson() {
  # Create Ant build.properties file, org is set to src
  loginUrl="https://$sfdcInstanceType.salesforce.com"

  credentialsJson="{\n";
  credentialsJson+='  "username":"'$sfdcUsername'",'"\n";
  credentialsJson+='  "password":"'$sfdcPassword'",'"\n";
  credentialsJson+='  "loginUrl":"'$loginUrl'",'"\n";
  credentialsJson+='  "generated":{'"\n";
  credentialsJson+='    "instanceUrl":"",'"\n";
  credentialsJson+='    "accessToken":""'"\n";
  credentialsJson+="   }\n";
  credentialsJson+="}\n";

  # # Write to file
  echo -e $credentialsJson > credentials.json;
}


##
## User prompts to create/delete files
##
# prompt user to see if they want to generate login script file
printf "\nWould you like to create a login execution script? [y/n]: ";
read -r createLoginScript;
if [ "$createLoginScript" = "y" ]
then
  createLoginScript
  printf $successMessage;
fi;

# prompt user to see if they want to generate Force Fast Save
printf "\nWould you like to create a Force-Faster-Save credentials.json? [y/n]: ";
read -r createForceFasterSaveCredentialsJson;
if [ "$createForceFasterSaveCredentialsJson" = "y" ]
then
  createForceFasterSaveCredentialsJson
  printf $successMessage;
fi;

# Prompt the user to create an ant build.properties file
printf "\nWould you like to create an ant build.properties file? [y/n]: ";
read -r createAntBuildProperties
if [ "$createAntBuildProperties" = "y" ]
then
  createAntBuildProperties
  printf $successMessage;
fi;

# Prompt the user to copy the Ant build.xml file from the parent directory
printf "\nWould you like to copy the ant build.xml file from parent folder? [y/n]: ";
read -r copyAntBuildXml
if [ "$copyAntBuildXml" = "y" ]
then
  cp ../build.xml build.xml
  printf $successMessage
fi;

# Prompt the user to copy the sfdc package.xml file from the parent directory
printf "\nWould you like to copy the SFDC package.xml file from parent folder? [y/n]: ";
read -r copyPackageXml
if [ "$copyPackageXml" = "y" ]
then
  mkdir -p src/
  cp ../package.xml src/package.xml
  printf $successMessage
fi;

# Prompt the user to create a execute_anon.apex file
printf "\nWould you like to create an Execute Anonymous file? [y/n]: ";
read -r createExecuteAnon
if [ "$createExecuteAnon" = "y" ]
then
  touch execute_anon.apex
  printf $successMessage
fi;

# Prompt the user to create a execute_anon.apex file
printf "\nWould you like to create an Force query file? [y/n]: ";
read -r createQueryFile
if [ "$createQueryFile" = "y" ]
then
  touch query.soql
  printf $successMessage
fi;

# Prompt the user to delete the Force CLI log file created
printf "\nWould you like to delete the Force CLI log file? [y/n]: "
read -r deleteForceLog

if [ "$deleteForceLog" = "y" ]
then
  rm force-login-log.txt;
  printf $successMessage
fi;

echo " "