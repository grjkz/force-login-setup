#!/bin/bash

# Call Force CLI command to login and pipe response to force-login-log.txt
force-original login -i=$1 > force-login-log.txt;

# Variables related to determining if login was a success
login_success_prefix="Logged in as";
line_containing_username="";

# Read and print file to console
# Determine if response was a success
printf "\x1b[34;1m";
while IFS='' read -r line || [[ -n "$line" ]]; do
    # Print line to console
    echo $line;

    # Check if the current line begins with the expected success response
    if [ "${line:0:12}" = "$login_success_prefix" ]
    then
        line_containing_username=$line;
    fi
done < "./force-login-log.txt";
printf "\x1b[0m";


##
## Functions
##
successMessage="\x1b[32;1mSuccess...\x1b[0m\n"
extractUsername() {
    # The 4th param is the Username surrounded in quotes.
    # Remove quotes and store username as a global variable
    username=${4:1:${#4}-2}
}

createLoginScript() {
    # Create a login script containing the Force CLI command active command
    printf "#!/bin/bash\nforce active -a $username\n"  > ./login;
    chmod +x login;

    printf "\x1b[32;1mLogin script created in current folder for username: \x1b[35;1m$username\x1b[0m\n";
}

createAntBuildProperties() {
    # Get path to location where Force CLI stores accounts and append username
    accounts_folder=~/.force/accounts/
    file_path="$accounts_folder$username"

    # Extract the AccessToken and InstanceUrl generated by Force CLI
    session_id=$(underscore select --in $file_path .AccessToken --outfmt text)
    server_url=$(underscore select --in $file_path .InstanceUrl --outfmt text)
    
    # Create Ant build.properties file, org is set to src
    buildXmlFile="org = src\nsf.sessionId = $session_id\nsf.serverurl = $server_url\nsf.maxPoll = 20\n\n"
    # Write to file
    echo -e $buildXmlFile > build.properties

    printf $successMessage
}


# Check if the line containing the Username is greater than 0,
# also an indicator that login was successful
if [ "${#line_containing_username}" != "0" ]
then
    extractUsername $line_containing_username;

    # prompt user to see if they want to generate login script file
    printf "\nWould you like to create a login execution script? [y/n]: ";
    read -r createLoginScript;
    if [ "$createLoginScript" = "y" ]
    then
        createLoginScript
    fi;

    # Prompt the user to create an ant build.properties file
    printf "\nWould you like to create an ant build.properties file? [y/n]: ";
    read -r createAntBuildProperties
    if [ "$createAntBuildProperties" = "y" ]
    then
        createAntBuildProperties
    fi;

    # Prompt the user to copy the Ant build.xml file from the parent directory
    printf "\nWould you like to copy the ant build.xml file from parent folder? [y/n]: ";
    read -r copyAntBuildXml
    if [ "$copyAntBuildXml" = "y" ]
    then
        cp ../build.xml build.xml
        printf $successMessage
    fi;

    # Prompt the user to copy the sfdc package.xml file from the parent directory
    printf "\nWould you like to copy the SFDC package.xml file from parent folder? [y/n]: ";
    read -r copyPackageXml
    if [ "$copyPackageXml" = "y" ]
    then
        mkdir -p src/
        cp ../package.xml src/package.xml
        printf $successMessage
    fi;
fi;

# Prompt the user to delete the Force CLI log file created
printf "\nWould you like to delete the Force CLI log file? [y/n]: "
read -r deleteForceLog

if [ "$deleteForceLog" = "y" ]
then
    rm force-login-log.txt;
    printf $successMessage
fi;